class String(){
	
	field int realLength;
	field int mLength;
	field Array string;

	constructor String new(int maxLength){
	/** Creates a new String object of length 0 containing no more chars than maxLength. */

		if(maxLength < 0){
			do Sys.error(14);
		}

		let realLength = 0;
		let mLength = maxLength;
		let string = Array.new(maxLength);

		return this;
	}

	method void dispose(){
	/** Disposes the string */	

		do string.dispose();
		return;
	}

	method int length(){
	/** Returns the length of the string */

		return realLength;
	}

	method char charAt(int j){
	/** Returns the char at index j */

		if(j > realLength){
			do Sys.error(15);
		}

		return string[j];
		
	}

	method void setCharAt(int j, char c){
	/** Sets the j'th element of the string to be c */

		if(j > realLength){
			do Sys.error(16);
		}

		let string[j] = c;

		return;
	}

	method String appendChar(char c){
	/** Appends c to the string and returns this string */

		if(realLength = maxLength){
			do Sys.error(17);
		}

		let realLength = realLength + 1;
		let string[realLength] = c;

		return this; 
	}

	method void eraseLastChar(){
	/** Erases the last character from the string */
		
		if(realLength = 0){
			do Sys.error(18);
		}

		let realLength = realLength - 1;

		return; 
	}

	method int intValue(){
	/** Returns the integer value of this string */

		return -1;
	}

	method void setIntHelper(int j){
	/** Converts a non negative number to a string */
		
		var int last;
		var char c;

		let last = j - (j / 10);
		let c = 48 + last;

		if(j < 10){

			do appendChar(c);
		}
		else{

			setIntHelper(j / 10);
			do appendChar(c);
		}
		return;
	}

	method void setInt(int j){   // TODO: Insufficient string capacity??
	/** Sets this string to hold the representation of j  */

		let string = Array.new(mLength);
		let realLength = 0;

		if(j < 0){
		
			let j = -j;
			do appendChar(45); // 45 is "-"
		}

		do setIntHelper(j);

		return;
	}

	function char backSpace(){
	/** Returns the backSpace char */
		return 129;
	}

	function char doubleQuote(){
	/** Returns the char " */
		return 34;
	}

	function char newLine(){
	/** Returns the new-line char */
		return 128;
	}
}