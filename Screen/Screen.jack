// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static int SCREEN_BASE_ADR;
    static int SCREEN_X_MAX;
    static int SCREEN_Y_MAX;
    static Array twoPows;
    static boolean isBlack;

    /** Initializes the Screen. */
    function void init() {
        var int i, x;

        let SCREEN_BASE_ADR = 16384;
        let SCREEN_X_MAX = 511;
        let SCREEN_Y_MAX = 255;
        let isBlack = true;

        // Init 2-pows
        let twoPows = Array.new(16);
        let i = 0;
        let x = 1;
        while (i < 16){
            let twoPows[i] = x;
            let x = x + x;
            let i = i + 1;
        }

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var boolean wasBlack;
        // Hold previous color
        let wasBlack = isBlack;

        // Draw white rectangle over entire screen
        let isBlack = false;
        // RazK: TODO: Optimize by implementing specifically instead of calling
        // drawRectangle (which uses redundant if statements)
        do Screen.drawRectangle(0,0,SCREEN_X_MAX, SCREEN_Y_MAX);

        // Restores previous color
        let isBlack = wasBlack;
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let isBlack = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int wordAdr, word, row, col, pix, bitmask;

        // Calculate row and column of pixel's word
        let row = Screen.mul32(y);
        let col = Screen.div16(x);

        // Build bitmask of pixel's word
        let pix = Screen.mod16(x);
        let bitmask = twoPows[pix];

        // Color pixel
        do Screen.colorWord(col, row, bitmask);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, dx, dy, ady_bdx, adx, ady, xsign, ysign;

        // Horizontal line?
        if (y1 = y2){
            do Screen.drawHorizontalLine(y1, x1, x2);
            return;
        }

        // Vertical line?
        if (x1 = x2){
            do Screen.drawVerticalLine(x1, y1, y2);
            return;
        }

        let a = 0;
        let b = 0;
        let dx = x2 - x1;
        let dy = y2 - y1;
        let ady_bdx = 0;

        let xsign = 1;
        let adx = dx;
        if (dx < 0){
            let xsign = -1;
            let adx = -dx;
        }

        let ysign = 1;
        let ady = dy;
        if (dy < 0){
            let ysign = -1;
            let ady = -dy;
        }

        while ((~(a > adx)) & (~(b > ady))){
            do Screen.drawPixel(x1 + (xsign * a), y1 + (ysign * b));
            if (ady_bdx < 0){
                let a = a + 1;
                let ady_bdx = ady_bdx + ady;
            }
            else{
                let b = b + 1;
                let ady_bdx = ady_bdx - adx;
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int swap, row;

        // No height? Draw horizontal line
        if (y1 = y2){
            do Screen.drawHorizontalLine(y1, x1, x2);
            return;
        }

        // No width? Draw vertical line
        if (x1 = x2){
            do Screen.drawVerticalLine(x1, y1, y2);
            return;
        }

        // Assert: y1 < y2
        if (y2 < y1){
            let swap = y1;
            let y1 = y2;
            let y2 = swap;
        }

        // Draw rectangle line by line
        let row = y1;
        while (~(row > y2)){
            do Screen.drawHorizontalLine(row, x1, x2);
            let row = row + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, r2, dy2, sqrtR2_dy2;
        let r2 = r * r;

        // Draw circle using the PDF algorithm (FAST)
        let dy = -r;
        let dy2 = r2; // (-r)*(-r) = r^2
        while (~(dy > r)){
            // Calc sqrt(r^2 - dy^2)
            let sqrtR2_dy2 = Math.sqrt(r2 - dy2);

            // Draw line: (x-sqrtR2_y2, y+dy) to (x+sqrtR2_y2, y+dy)
            do Screen.drawHorizontalLine(y + dy,
                                         x - sqrtR2_dy2,
                                         x + sqrtR2_dy2);

            // Update dy^2 FAST using identities
            let dy2 = dy2 + dy + dy + 1; // (dy+1)^2 = dy^2 + 2dy + 1

            // Advance dy
            let dy = dy + 1;
        }
        return;
    }

    // ================================
    // = Optimized Specific Functions =
    // ================================

    /** Returns the given word colored with the given bitmask according to
     * current color. */
    function int getColoredWord(int word, int bitmask){
        // Black: bitmask | word
        if (isBlack){ // Turn pixels ON
            return bitmask | word;
        }
        // White: ~bitmask & word
        else { // Turn pixels OFF
            return (~(bitmask)) & word;
        }
    }

    /** Colors the screen word at the given row and column with the given
     * bitmask according to current color. */
    function void colorWord(int row, int col, int bitmask){
        var int wordAdr, word;

        // Extract desired word from screen
        let wordAdr = SCREEN_BASE_ADR + row + col;
        let word = Memory.peek(wordAdr);

        // Color masked pixels in word with current color
        let word = Screen.getColoredWord(word, bitmask);
        do Memory.poke(wordAdr, word);
        return;
    }

    /** Draws a horizontal line at height y from x1 to x2 */
    function void drawHorizontalLine(int y, int x1, int x2){
        var int left, right;
        var int leftCol, rightCol, row;
        var int leftPix, rightPix;
        var int col, pix;
        var int mask, maskLeft, maskRight;

        // RazK: TODO: If ALL usages can determine this in advance, remove
        // Classify left and right (or draw pixel if same)
        if (x1 < x2){
            let left = x1;
            let right = x2;
        }
        else {
            if (x2 < x1){
                let left = x2;
                let right = x1;
            }
            else { // Same x --> single pixel
                do Screen.drawPixel(x1, y);
                return;
            }
        }

        // Extract row, columns and pixels
        let row = Screen.mul32(y);
        let leftCol = Screen.div16(left);
        let leftPix = Screen.mod16(left);
        let rightCol = Screen.div16(right);
        let rightPix = Screen.mod16(right);

        // Case 1:  | +---+ | (pixels in same col)
        //            L   R
        if (leftCol = rightCol){
            let mask = Screen.maskBetween(leftPix, rightPix);
            do Screen.colorWord(row, leftCol, mask);
        }
        // Case 2:  |   +---|[...]|---+   | (pixels in different cols)
        //              L             R
        else {
            let maskLeft = Screen.maskSuffix(leftPix);
            let maskRight = Screen.maskPrefix(rightPix);

            // Color left part
            do Screen.colorWord(row, leftCol, maskLeft);

            // Color words between
            let col = leftCol + 1;
            while (col < rightCol){
                do Screen.colorWord(row, col, -1);
                let col = col + 1;
            }

            // Color right part
            do Screen.colorWord(row, rightCol, maskRight);
        }

        return;
    }

    /** Draws a vertical line at position x from y1 to y2 */
    function void drawVerticalLine(int x, int y1, int y2){
        var int top, bottom;
        var int topRow, botRow, col;
        var int row, mask, pix;

        // RazK: TODO: If ALL usages can determine this in advance, remove
        // Classify top and bottom (or draw pixel if same)
        if (y1 < y2){
            let top = y1;
            let bottom = y2;
        }
        else {
            if (y2 < y1){
                let top = y2;
                let bottom = y1;
            }
            else { // Same y --> single pixel
                do Screen.drawPixel(x, y1);
                return;
            }
        }

        // Extract col, rows and pixels
        let col = Screen.div16(x);
        let topRow = Screen.mul32(top);
        let botRow = Screen.mul32(bottom);
        let pix = Screen.mod16(x);
        let mask = twoPows[pix];

        // Color words between
        let row = topRow;
        while (row < (botRow + 1)){
            do Screen.colorWord(row, col, mask);
            let row = row + 32; // row step = 32
        }

        return;
    }

    // ======================
    // = Clever Bitmask Ops =
    // ======================

    /** Generate a bitmask from given index (inclusive) up to word end.
     * Example:
     *     i=2
     *  |  +---|
     *  |001111| (bitmask) */
    function int maskSuffix(int i){
        return ~(twoPows[i]-1);
    }

    /** Generate a bitmask from word start up to given index (inclusive).
     * Example:
     *     i=2
     *  |--+   |
     *  |111000| (bitmask) */
    function int maskPrefix(int i){
        return twoPows[i] | (twoPows[i]-1);
    }

    /** Generate a bitmask from i to j (inclusive)
     * Example:
     *  i=1, j=4
     *  | +--+ |
     *  |011110| (bitmask) */
    function int maskBetween(int i, int j){
        return Screen.maskSuffix(i) & Screen.maskPrefix(j);
    }

    // ===================
    // = Math For Screen =
    // ===================

    /** Calculates (x * 32) FAST */
    function int mul32(int x){
        var int i;
        let i = 0;
        while (i<5){
            let x = x + x;
            let i = i + 1;
        }
        return x;
    }

    /** Calculates (x / 16) FAST */
    function int div16(int x){
        var int i, res;
        let i = 4;
        let res = 0;
        // Accumulate 2^[i-4] for every 2^[i] in y
        while (i<16){
            if ((x & twoPows[i]) = twoPows[i]){
                let res = res + twoPows[i-4];
            }
            let i = i + 1;
        }
        return res;
    }

    /** Calculates (x % 16) FAST */
    function int mod16(int x){
        return x & 15;
    }
}
